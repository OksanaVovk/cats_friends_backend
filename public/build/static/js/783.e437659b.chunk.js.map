{"version":3,"file":"static/js/783.e437659b.chunk.js","mappings":"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","sources":["components/ErrorMessage.js","schemas/register.js","components/RegistrationForm.js","pages/RegisterPage.js"],"sourcesContent":["import { Typography } from '@mui/material';\r\n\r\nconst ErrorMessage = ({ message }) => {\r\n  return message ? (\r\n    <Typography\r\n      sx={{ color: 'red', fontSize: '0.875rem', marginTop: '0.2rem' }}\r\n    >\r\n      {message}\r\n    </Typography>\r\n  ) : null;\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { z } from 'zod';\r\n\r\nexport const registerSchema = z.object({\r\n  name: z\r\n    .string()\r\n    .min(2, { message: 'Name must be at least 2 characters long' }),\r\n  email: z\r\n    .string()\r\n    .optional()\r\n    .refine(val => val === '' || z.string().email().safeParse(val).success, {\r\n      message: 'Invalid email address',\r\n    }),\r\n  password: z\r\n    .string()\r\n    .min(6, { message: 'Password must be at least 6 characters long' }),\r\n});\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport authOperations from '../redux/auth/operations';\r\nimport { TextField, Button, Box, Typography } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { registerSchema } from 'schemas/register';\r\nimport ErrorMessage from './ErrorMessage';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    height: '100vh',\r\n  },\r\n  form: {\r\n    width: '100%',\r\n    maxWidth: 400,\r\n    padding: theme.spacing(3),\r\n    backgroundColor: theme.palette.background.paper,\r\n    borderRadius: '8px',\r\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',\r\n  },\r\n  title: {\r\n    marginBottom: theme.spacing(2),\r\n    textAlign: 'center',\r\n  },\r\n  submitButton: {\r\n    marginTop: theme.spacing(2),\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.black.main,\r\n    transition: 'background-color 0.3s, color 0.3s',\r\n    '&:hover': {\r\n      backgroundColor: theme.palette.secondary.main,\r\n      color: theme.palette.white.main,\r\n    },\r\n  },\r\n}));\r\n\r\nfunction RegistrationForm() {\r\n  const classes = useStyles();\r\n  const [registerError, setRegisterError] = useState('');\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({ resolver: zodResolver(registerSchema) });\r\n\r\n  const onSubmit = async data => {\r\n    try {\r\n      await dispatch(authOperations.register(data)).unwrap();\r\n      reset();\r\n      setRegisterError('');\r\n      navigate('/login', { replace: true });\r\n    } catch (error) {\r\n      setRegisterError(error || 'Register failed. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      {registerError && (\r\n        <Typography sx={{ color: 'red', marginBottom: '30px' }}>\r\n          {registerError}\r\n        </Typography>\r\n      )}\r\n      <form onSubmit={handleSubmit(onSubmit)} className={classes.form}>\r\n        <Typography variant=\"h5\" className={classes.title} sx={{}}>\r\n          Register\r\n        </Typography>\r\n        <TextField\r\n          label=\"Name*\"\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          margin=\"normal\"\r\n          {...register('name')}\r\n        />\r\n        <ErrorMessage message={errors.name?.message} />\r\n\r\n        <TextField\r\n          label=\"Email*\"\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          margin=\"normal\"\r\n          {...register('email')}\r\n        />\r\n        <ErrorMessage message={errors.email?.message} />\r\n\r\n        <TextField\r\n          label=\"Password*\"\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          margin=\"normal\"\r\n          type=\"password\"\r\n          {...register('password')}\r\n        />\r\n        <ErrorMessage message={errors.password?.message} />\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          fullWidth\r\n          className={classes.submitButton}\r\n        >\r\n          REGISTER\r\n        </Button>\r\n      </form>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default RegistrationForm;\r\n","import RegistrationForm from 'components/RegistrationForm';\r\nimport { Box } from '@mui/material';\r\n\r\nconst RegisterPage = () => {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: '100vh',\r\n        padding: { xs: '0px 10px', lg: '0px 0px' },\r\n      }}\r\n    >\r\n      <RegistrationForm />\r\n    </Box>\r\n  );\r\n};\r\nexport default RegisterPage;\r\n"],"names":["message","sx","color","fontSize","marginTop","registerSchema","z","name","min","email","optional","refine","val","safeParse","success","password","useStyles","makeStyles","theme","root","display","flexDirection","alignItems","justifyContent","height","form","width","maxWidth","padding","spacing","backgroundColor","palette","background","paper","borderRadius","boxShadow","title","marginBottom","textAlign","submitButton","primary","main","black","transition","secondary","white","classes","useState","registerError","setRegisterError","navigate","useNavigate","dispatch","useDispatch","useForm","resolver","zodResolver","register","handleSubmit","reset","errors","formState","onSubmit","data","authOperations","unwrap","replace","Box","className","Typography","variant","TextField","label","fullWidth","margin","ErrorMessage","type","Button","xs","lg"],"sourceRoot":""}