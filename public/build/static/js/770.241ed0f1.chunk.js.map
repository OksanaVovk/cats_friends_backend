{"version":3,"file":"static/js/770.241ed0f1.chunk.js","mappings":"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","sources":["components/StyledImageItemBar.js","components/StyledIconButton.js","components/ContentItem.js","components/FavoriteList.js","pages/FavoritePage.js"],"sourcesContent":["import { ImageListItemBar } from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\n\r\nconst StyledImageItemBar = styled(ImageListItemBar)(({ theme }) => ({\r\n  transition: \"background-color 0.3s\",\r\n  \"&:hover\": {\r\n    backgroundColor: \"rgba(0, 0, 0, 0.6)\",\r\n  },\r\n}));\r\n\r\nexport default StyledImageItemBar;\r\n","import { IconButton } from '@mui/material';\r\nimport { styled } from '@mui/material/styles';\r\n\r\nconst StyledIconButton = styled(IconButton)(({ theme }) => ({\r\n  transition: 'color 0.3s',\r\n  '&:hover': {\r\n    color: theme.palette.secondary.main,\r\n  },\r\n  '&.active': {\r\n    color: theme.palette.secondary.main,\r\n  },\r\n}));\r\n\r\nexport default StyledIconButton;\r\n","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport authOperations from '../redux/auth/operations';\r\nimport { authSelector } from '../redux/auth/authSelectors';\r\nimport { HashLink } from 'react-router-hash-link';\r\nimport { toast } from 'react-hot-toast';\r\nimport { ImageListItem } from '@mui/material';\r\nimport StyledImageItemBar from './StyledImageItemBar';\r\nimport StyledIconButton from './StyledIconButton';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport { useRef } from 'react';\r\nimport { Skeleton } from '@mui/material';\r\n\r\nconst ContentItem = ({ img, title, id, isLoading }) => {\r\n  const isLoggedIn = useSelector(authSelector.selectIsLoggedIn);\r\n  const user = useSelector(authSelector.selectUser);\r\n  const likeButtonRef = useRef(null);\r\n\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (isLoggedIn) {\r\n      const isFavorite = user.favorite.some(fv => fv.id === id);\r\n      likeButtonRef.current.classList.toggle('active', isFavorite);\r\n    }\r\n  }, [isLoggedIn, user, id, likeButtonRef]);\r\n\r\n  const onLikeClick = (event, id) => {\r\n    event.stopPropagation();\r\n    if (!isLoggedIn) {\r\n      toast.error(\r\n        'Only authorized users can add an image to favorites. Please log in.',\r\n        {\r\n          duration: 6000,\r\n          position: 'top-right',\r\n        }\r\n      );\r\n      navigate('/login');\r\n    } else {\r\n      dispatch(authOperations.updateFavorite({ catsId: id }));\r\n      likeButtonRef.current.classList.toggle('active');\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <Skeleton variant=\"rectangular\" width={164} height={164} />;\r\n  }\r\n\r\n  return (\r\n    <ImageListItem key={id}>\r\n      <HashLink\r\n        smooth\r\n        to={`/blog#${id}`}\r\n        style={{\r\n          textDecoration: 'none',\r\n          cursor: 'pointer',\r\n          display: 'block',\r\n          overflow: 'hidden',\r\n        }}\r\n      >\r\n        <img\r\n          src={`${img}?w=164&h=164&fit=crop&auto=format`}\r\n          alt={title}\r\n          loading=\"lazy\"\r\n          style={{\r\n            width: '100%',\r\n            display: 'block',\r\n          }}\r\n        />\r\n      </HashLink>\r\n\r\n      <StyledImageItemBar\r\n        title={title}\r\n        position=\"bottom\"\r\n        sx={{ backgroundColor: 'rgba(0, 0, 0, 0.3)' }}\r\n        actionIcon={\r\n          <StyledIconButton\r\n            onClick={event => onLikeClick(event, id)}\r\n            aria-label={`like ${title}`}\r\n            sx={{ color: 'rgba(255, 255, 255, 0.8)' }}\r\n            ref={likeButtonRef}\r\n          >\r\n            <FavoriteIcon />\r\n          </StyledIconButton>\r\n        }\r\n      />\r\n    </ImageListItem>\r\n  );\r\n};\r\n\r\nexport default ContentItem;\r\n","import { useSelector } from 'react-redux';\r\nimport { authSelector } from '../redux/auth/authSelectors';\r\nimport ContentItem from './ContentItem';\r\n\r\nimport { Typography, ImageList, useMediaQuery } from '@mui/material';\r\n\r\nconst FavoriteList = () => {\r\n  const isXs = useMediaQuery(theme => theme.breakpoints.down('sm'));\r\n  const isSm = useMediaQuery(\r\n    theme => theme.breakpoints.up('sm') && theme.breakpoints.down('md')\r\n  );\r\n  const isMd = useMediaQuery(theme => theme.breakpoints.up('md'));\r\n  const getCols = () => {\r\n    if (isXs) return 1;\r\n    if (isSm) return 2;\r\n    if (isMd) return 3;\r\n    return 3;\r\n  };\r\n  const user = useSelector(authSelector.selectUser);\r\n  const favoriteList = user.favorite || [];\r\n  return (\r\n    <>\r\n      {favoriteList.length === 0 ? (\r\n        <Typography variant=\"h5\" sx={{ textAlign: 'center' }}>\r\n          You don't have any favorite images yet.\r\n        </Typography>\r\n      ) : (\r\n        <ImageList\r\n          sx={{ width: '100%' }}\r\n          cols={getCols()}\r\n          rowHeight=\"auto\"\r\n          gap={12}\r\n          variant=\"masonry\"\r\n        >\r\n          {favoriteList.map(item => (\r\n            <ContentItem\r\n              key={item.id}\r\n              img={item.img}\r\n              title={item.title}\r\n              id={item.id}\r\n            />\r\n          ))}\r\n        </ImageList>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FavoriteList;\r\n","import { Box, Typography, Link } from '@mui/material';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { authSelector } from '../redux/auth/authSelectors';\r\nimport FavoriteList from 'components/FavoriteList';\r\n\r\nconst FavoritePage = () => {\r\n  const isLoggedIn = useSelector(authSelector.selectIsLoggedIn);\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        padding: { xs: '50px 50px', lg: '100px 50px' },\r\n      }}\r\n    >\r\n      <Typography\r\n        gutterBottom\r\n        variant=\"h4\"\r\n        sx={{ marginBottom: { xs: '30px', md: '50px', lg: '70px' } }}\r\n      >\r\n        Favorite cats\r\n      </Typography>\r\n      {isLoggedIn ? (\r\n        <FavoriteList />\r\n      ) : (\r\n        <Typography>\r\n          Only authorized users can add an image to favorites. Please{' '}\r\n          <Link\r\n            component={RouterLink}\r\n            to=\"/login\"\r\n            sx={{ color: theme => theme.palette.secondary.main }}\r\n          >\r\n            log in\r\n          </Link>\r\n          .\r\n        </Typography>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\nexport default FavoritePage;\r\n"],"names":["styled","ImageListItemBar","theme","transition","backgroundColor","IconButton","color","palette","secondary","main","img","title","id","isLoading","isLoggedIn","useSelector","authSelector","user","likeButtonRef","useRef","navigate","useNavigate","dispatch","useDispatch","useEffect","isFavorite","favorite","some","fv","current","classList","toggle","Skeleton","variant","width","height","ImageListItem","smooth","to","style","textDecoration","cursor","display","overflow","src","alt","loading","position","sx","actionIcon","onClick","event","stopPropagation","authOperations","catsId","toast","duration","onLikeClick","ref","Favorite","isXs","useMediaQuery","breakpoints","down","isSm","up","favoriteList","length","Typography","textAlign","ImageList","cols","rowHeight","gap","map","item","ContentItem","Box","flexDirection","justifyContent","alignItems","padding","xs","lg","gutterBottom","marginBottom","md","Link","component","RouterLink"],"sourceRoot":""}